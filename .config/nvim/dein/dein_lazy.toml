[[plugins]]
repo        = 'Shougo/deoplete.nvim'
depends     = ['neco-vim', 'neco-syntax', 'deoplete-jedi', 'neosnippet']
on_i        = 1
if          = 'has("nvim")'
hook_add    = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#source#go#gocode_binary = '$HOME/go/bin/gocode'
let g:deoplete#auto_complete_delay = 0
'''

[[plugins]]
repo        = 'Shougo/neocomplete.vim'
depends     = ['neco-vim', 'neco-syntax', 'neosnippet']
on_i        = 1
if          = '!has("nvim")&&has("lua")'
hook_add    = '''
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#auto_complete_delay = 0
'''

[[plugins]]
repo        = 'Shougo/neocomplcache.vim'
depends     = ['neco-vim', 'neco-syntax', 'neosnippet']
on_i        = 1
if          = '!has("nvim")&&!has("lua")'
hook_add    = '''
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 0
'''

[[plugins]]
repo        = 'Shougo/denite.nvim'
depends     = ['neoyank.vim', 'neomru.vim']
hook_add    = '''
nnoremap <silent> <Space>f :<C-u>Denite file_rec<CR>
nnoremap <silent> <Space>m :<C-u>Denite file_mru<CR>
nnoremap <silent> <Space>y :<C-u>Denite neoyank<CR>
nnoremap <silent> <Space>b :<C-u>Denite buffer<CR>
nnoremap <silent> <Space>d :<C-u>Denite directory_mru<CR>
nnoremap <silent> <Space>g :<C-u>Denite grep<CR>
'''
hook_post_source   = '''
call denite#custom#var('file_rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup',
    \  '--hidden', '-g', ''])
call denite#custom#option('default', 'prompt', '>')
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts',
    \ ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
"call denite#custom#map('insert', "<Tab>", '<denite:move_to_next_line>')
call denite#custom#map('insert', "<Down>", '<denite:move_to_next_line>')
call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')
call denite#custom#map('insert', "<S-Tab>", '<denite:move_to_previous_line>')
call denite#custom#map('insert', "<Up>", '<denite:move_to_previous_line>')
call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')
call denite#custom#source('file_mru', 'matchers', ['matcher_fuzzy', 'matcher_ignore_globs'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',['//[0-9]/*', '*~', '*.(o|exe|bak|pyc|sw[po]|class)'])
if dein#tap('denite.nvim') && dein#tap('vim-qfreplace')
    function! MyDeniteReplace(context)
        let qflist = []
        for target in a:context['targets']
            if !has_key(target, 'action__path') | continue | endif
            if !has_key(target, 'action__line') | continue | endif
            if !has_key(target, 'action__text') | continue | endif
            call add(qflist, {
                    \ 'filename': target['action__path'],
                    \ 'lnum': target['action__line'],
                    \ 'text': target['action__text']
                    \ })
        endfor
        call setqflist(qflist)
        call qfreplace#start('')
    endfunction
    call denite#custom#action('file', 'qfreplace', function('MyDeniteReplace'))
endif
'''

[[plugins]]
repo        = 'Shougo/neoyank.vim'
hook_post_source   = '''
silent autocmd! neoyank CursorHold
'''

[[plugins]]
repo        = 'Shougo/neosnippet'
depends     = ['vim-snippets']
on_event    = 'InsertCharPre'
hook_add    = '''
let g:neosnippet#disable_runtime_snippets = {
\   '_' : 1,
\ }
'''
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
imap <expr> <Tab> pumvisible() ? "\<C-n>" :
\ neosnippet#jumpable() ?
\ "\<Plug>(neosnippet_jump)" : "\<C-r>=lexima#insmode#leave(1, '<LT>Tab>')\<CR>"
smap <expr> <Tab> neosnippet#jumpable() ?
\ "\<Plug>(neosnippet_jump)" : "\<Tab>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
autocmd MyAutoCmd InsertEnter * inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return !pumvisible() ?
        \ lexima#expand('<CR>', 'i') :
        \ neosnippet#expandable() ?
        \ neosnippet#mappings#expand_impl() : "\<C-y>"
endfunction
'''

[[plugins]]
repo        = 'honza/vim-snippets'
hook_add    = '''
let g:neosnippet#snippets_directory='$HOME/.cache/dein/repos/github.com/honza/vim-snippets/snippets'
'''

[[plugins]]
repo        = 'Shougo/neomru.vim'

[[plugins]]
repo        = 'Shougo/neco-syntax'

[[plugins]]
repo        = 'zchee/deoplete-jedi'

[[plugins]]
repo        = 'Shougo/neco-vim'

[[plugins]]
repo        = 'thinca/vim-qfreplace'

[[plugins]]
repo        = 'brooth/far.vim'

[[plugins]]
repo        = 'rhysd/nyaovim-popup-tooltip'
if          = 'exists("g:nyaovim_version")'

[[plugins]]
repo        = 'rhysd/nyaovim-markdown-preview'
if          = 'exists("g:nyaovim_version")'

[[plugins]]
repo        = 'rhysd/nyaovim-mini-browser'
if          = 'exists("g:nyaovim_version")'
